plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
}
ext {
	springCloudVersion = "2024.0.0"
}
group = 'com.gabi'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot Starters
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'


	//AWS S3
	implementation 'software.amazon.awssdk:s3:2.20.87'          // AWS SDK v2 S3 모듈
	implementation 'software.amazon.awssdk:auth'        // 인증에 필요
	implementation 'software.amazon.awssdk:regions'

	// MySQL Driver
	implementation 'mysql:mysql-connector-java:8.0.32'
	runtimeOnly 'mysql:mysql-connector-java:8.0.32'

	// JWT Dependencies
	implementation 'io.jsonwebtoken:jjwt:0.12.5'

	// Feign
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'io.github.openfeign.form:feign-form-spring:3.8.0'
	// Query DSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Spring Security Crypto
	implementation 'org.springframework.security:spring-security-crypto'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Mapper
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
}

tasks.named('test') {
	useJUnitPlatform()
}
def generated = 'src/main/generated'

tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

sourceSets {
	main {
		java {
			srcDirs += [ generated ]
		}
	}
}
test {
	systemProperty 'spring.profiles.active', 'local'
}
dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
	}
}

